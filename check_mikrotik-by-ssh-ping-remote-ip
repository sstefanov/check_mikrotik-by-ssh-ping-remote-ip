#!/bin/sh
#  Copyright (C) 2019 ElÃ­as Torres-Arroyo
#  https://www.comglobalit.com

# # to be added in commands.cfg
# define command {
#        command_name    check_mikrotik-by-ssh-ping-remote-ip
#        command_line    /usr/local/bin/mikrotik-by-ssh-ping-remote-ip '$HOSTADDRESS$' '$ARG1$' '$ARG2$' '$ARG3$' '$ARG4$' '$ARG5$' '$ARG6$' '$ARG7$' '$ARG8$'
# }

#debug
# DEBUG_LOG="/tmp/${0##*/}.log"
# echo "$0 started with $@" > ${DEBUG_LOG}
# export PS4='${LINENO} '
# exec 1>> ${DEBUG_LOG}
# exec 2>> ${DEBUG_LOG}
# set -x

# ssh config file
CF="$HOME/.ssh/config"

HOST_IP="$1"
TEST_IP="$2"
#SSH_USER="${3:-monitoring-user}"
PLOSS_WARN="${3:-10}"
PLOSS_CRIT="${4:-30}"
AVGRTT_WARN="${5:-300}"
AVGRTT_CRIT="${6:-1500}"
#PING_COUNT must be >1 for OS version 7
PING_COUNT="${7:-3}"

#SSH_KEY="/var/lib/nagios/id_rsa"

# get settings from ssh config
if [ -f "$CF" ]; then
  l=$(grep -nor -m 1 $HOST_IP $CF | cut -d ':' -f 1)
  if [ -n "$l" ]; then
  #first empty line before found
    fl=$(head -n $l $CF |grep -n -x '^$'|tail -n 1| cut -d ':' -f 1)
  #next empty line
    if [ -z "$fl" ]; then
      ll=$(grep -n -m1 '^$' $CF|tail -n 1| cut -d ':' -f 1)
  # get HostKeyAlias
      ha=$(head -n $ll $CF|grep -i "HostKeyAlias"|cut -d ' ' -f 2)
    else
      ll=$(head -n +$fl $CF |grep -n -m2 '^$'|tail -n 1| cut -d ':' -f 1)
      ha=$(tail -n +$fl $CF |head -n $ll|grep -i "HostKeyAlias"|cut -d ' ' -f 2)
    fi
    [ -n "$ha" ] && HOST_IP=$ha
  fi
fi

SCRIPT="/ping count=$PING_COUNT interval=1 address=$TEST_IP"

#OUTPUT=`/usr/bin/ssh  $SSH_USER@$HOST_IP -i $SSH_KEY $SCRIPT | grep sent -A1 | tr -d '[\r\n]'`

OUTPUT=`/usr/bin/ssh  $HOST_IP $SCRIPT | grep sent -A1 | tr -d '[\r\n]'`
[ $? -ne 0 ] && exit 3

# example: sent=4 received=4 packet-loss=0% min-rtt=115ms avg-rtt=135ms 
# remove us
OUT_PERF_DATA=`echo $OUTPUT | sed 's/[0-9]*us//g;s/ms//g;s/%//g;s/\r\n//'`

PLOSS=`echo $OUT_PERF_DATA  | awk '{print $3}' | cut -d= -f2`
AVGRTT=`echo $OUT_PERF_DATA | awk '{print $5}' | cut -d= -f2`

if [ $PLOSS -lt $PLOSS_WARN -a ${AVGRTT:-100000} -lt $AVGRTT_WARN ];
then
  STATUS=0
elif [ $PLOSS -lt $PLOSS_CRIT -a ${AVGRTT:-100000} -lt $AVGRTT_CRIT ];
then
  STATUS=1
else
  STATUS=2
fi

# sent=10 received=10 packet-loss=0 min-rtt=5 avg-rtt=24 max-rtt=98
SENT=`echo $OUT_PERF_DATA  | awk '{print $1}' | cut -d= -f2`
RCVD=`echo $OUT_PERF_DATA  | awk '{print $2}' | cut -d= -f2`
MINRTT=`echo $OUT_PERF_DATA  | awk '{print $4}' | cut -d= -f2`
MAXRTT=`echo $OUT_PERF_DATA  | awk '{print $6}' | cut -d= -f2`

PERF_DATA="sent=$SENT rcvd=$RCVD packet-loss=${PLOSS}%;$PLOSS_WARN;$PLOSS_CRIT avg-rtt=${AVGRTT:-$AVGRTT_CRIT}ms;$AVGRTT_WARN;$AVGRTT_CRIT min-rtt=${MINRTT}ms max-rtt=${MAXRTT}ms"

# TODO: Add thresholds to performance data ~ elias
echo "Ping to $TEST_IP: ${AVGRTT:-INF}ms/warn=${AVGRTT_WARN}ms/crit=${AVGRTT_CRIT}ms, Packet Loss: ${PLOSS}%/warn=${PLOSS_WARN}%/crit=${PLOSS_CRIT}%, count=$PING_COUNT|$PERF_DATA"
exit $STATUS
